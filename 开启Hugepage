https://doc.dpdk.org/spp/setup/getting_started.html


1. Getting Started â€” Soft Patch Panel 18.08.1 documentation (dpdk.org)

1. Getting Started
This documentation is described for Ubuntu 16.04 and later.
1.1. Setup
1.1.1. Reserving Hugepages
Hugepages must be enabled for running DPDK with high performance. Hugepage support is required to reserve large amount size of pages, 2MB or 1GB per page, to less TLB (Translation Lookaside Buffers) and to reduce cache miss. Less TLB means that it reduce the time for translating virtual address to physical.
Hugepage reservation might be different for 2MB or 1GB.
For 1GB page, hugepage setting must be activated while booting system. It must be defined in boot loader configuration, usually is /etc/default/grub. Add an entry to define pagesize and the number of pages. Here is an example. hugepagesz is for the size and hugepages is for the number of pages.
#/etc/default/grub
GRUB_CMDLINE_LINUX="default_hugepagesz=1G hugepagesz=1G hugepages=8"
Note
1GB hugepages might not be supported in your machine. It depends on that CPUs support 1GB pages or not. You can check it by referring /proc/cpuinfo. If it is supported, you can find pdpe1gb in the flags attribute.
$cat /proc/cpuinfo |pdpe1gb
For 2MB page, you can activate hugepages while booting or at anytime after system is booted. Define hugepages setting in /etc/default/grub to activate it while booting, or overwrite the number of 2MB hugepages as following.
$echo 1024> /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
In this case, 1024 pages of 2MB (totally 2048 MB) are reserved.
1.1.2. Mount hugepages
Make the memory available for using hugepages from DPDK.
$mkdir /mnt/huge
$mount -t hugetlbfs nodev /mnt/huge
It is also available while booting by adding a configuration of mount point in /etc/fstab, or after booted.
The mount point for 2MB or 1GB can be made permanent accross reboot. For 2MB, it is no need to declare the size of hugepages explicity.
#/etc/fstab
nodev /mnt/huge hugetlbfs defaults 0 0
For 1GB, the size of hugepage must be specified.
#/etc/fstab
nodev /mnt/huge_1GB hugetlbfs pagesize=1GB 0 0
1.1.3. Disable ASLR
SPP is a DPDK multi-process application and there are a number of limitations .
Address-Space Layout Randomization (ASLR) is a security feature for memory protection, but may cause a failure of memory mapping while starting multi-process application as discussed in dpdk-dev .
ASLR can be disabled by assigning kernel.randomize_va_space to 0, or be enabled by assigning it to 2.
#disable ASLR
$sudo sysctl -w kernel.randomize_va_space=0
#enable ASLR
$sudo sysctl -w kernel.randomize_va_space=2
You can check the value as following.
$sysctl -n kernel.randomize_va_space

1.2. Install DPDK and SPP
Before using SPP, you need to install DPDK. In this document, briefly describ how to install and setup DPDK. Refer to DPDK documentation for more details. For Linux, see Getting Started Guide for Linux .
1.2.1. DPDK
Clone repository and compile DPDK in any directory.
$cd/path/to/any
$git clone http://dpdk.org/git/dpdk
To compile DPDK, required to install libnuma-devel library.
$sudo apt install libnuma-dev
Python and pip are also required if not installed.
#Python2
$sudo apt install python python-pip
#Python3
$sudo apt install python3 python3-pip
SPP provides libpcap-based PMD for dumping packet to a file or retrieve it from the file. To use PCAP PMD, install libpcap-dev and enable it. text2pcap is also required for creating pcap file which is included in wireshark.
$sudo apt install libpcap-dev
$sudo apt install wireshark
PCAP is disabled by default in DPDK configuration. CONFIG_RTE_LIBRTE_PMD_PCAP and CONFIG_RTE_PORT_PCAP define the configuration and enabled it to y.
#dpdk/config/common_base
CONFIG_RTE_LIBRTE_PMD_PCAP=y...CONFIG_RTE_PORT_PCAP=y
Compile DPDK with target environment.
$cd dpdk
$export RTE_SDK=$(pwd)$export RTE_TARGET=x86_64-native-linuxapp-gcc  # depends on your env$make install T=$RTE_TARGET

From <https://doc.dpdk.org/spp/setup/getting_started.html> 
